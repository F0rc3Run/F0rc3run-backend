name: Scan WARP via Iran Proxy and Deploy Results

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  scan-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # --- Part 1: Setup Environment ---

      - name: Checkout Main Repo
        uses: actions/checkout@v4

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Dependencies & Build Scanner
        run: |
          sudo apt-get update && sudo apt-get install -y wget curl jq
          echo "Downloading sing-box client..."
          wget -O sing-box.tar.gz "https://github.com/SagerNet/sing-box/releases/download/v1.12.0/sing-box-1.12.0-linux-amd64.tar.gz"
          tar -xzf sing-box.tar.gz
          cp sing-box-1.12.0-linux-amd64/sing-box .
          chmod +x sing-box
          
          echo "Cloning and building the scanner from source..."
          git clone https://github.com/bia-pain-bache/BPB-Warp-Scanner.git scanner-source
          cd scanner-source
          go build -o ../scanner .
          cd ..
          chmod +x scanner
          echo "Scanner built successfully."

      # --- Part 2: Find, Connect, and Test Iran Proxy using Python ---

      - name: Find and Connect to a Working Iran Proxy
        id: proxy_connect
        run: |
          python3 -c "
          import os
          import json
          import subprocess
          import time
          import urllib.parse
          import base64

          def create_vless_config(uri):
              parsed_uri = urllib.parse.urlparse(uri)
              params = urllib.parse.parse_qs(parsed_uri.query)
              
              config = {
                  'type': 'vless',
                  'server': parsed_uri.hostname,
                  'server_port': parsed_uri.port,
                  'uuid': parsed_uri.username
              }
              
              if params.get('security') == ['tls']:
                  config['tls'] = {'enabled': True, 'server_name': params.get('sni', [parsed_uri.hostname])[0]}
              if params.get('type') == ['ws']:
                  config['transport'] = {'type': 'ws', 'path': params.get('path', ['/'])[0], 'headers': {'Host': params.get('host', [parsed_uri.hostname])[0]}}

              return config

          def create_ss_config(uri):
              uri_body = uri.replace('ss://', '').split('#')[0]
              if '@' not in uri_body:
                  try:
                      uri_body = base64.b64decode(uri_body + '===').decode('utf-8')
                  except:
                      return None
              
              creds_part, server_part = uri_body.split('@')
              method, password = creds_part.split(':')
              server, server_port = server_part.split(':')

              return {
                  'type': 'shadowsocks',
                  'server': server,
                  'server_port': int(server_port),
                  'method': method,
                  'password': password
              }

          def create_vmess_config(uri):
              try:
                  decoded_json = json.loads(base64.b64decode(uri.replace('vmess://', '') + '===').decode('utf-8'))
              except:
                  return None
              
              return {
                  'type': 'vmess',
                  'server': decoded_json.get('add'),
                  'server_port': int(decoded_json.get('port')),
                  'uuid': decoded_json.get('id'),
                  'alter_id': int(decoded_json.get('aid', 0))
              }

          print('Fetching proxy list from URL...')
          subprocess.run(['curl', '-s', '-o', 'ir_proxies.txt', 'https://raw.githubusercontent.com/F0rc3Run/F0rc3Run/refs/heads/main/splitted-by-country/IR.txt'])

          with open('ir_proxies.txt', 'r') as f:
              for line in f:
                  proxy_uri = line.strip()
                  if not proxy_uri or proxy_uri.startswith('//'):
                      continue

                  outbound_config = None
                  if proxy_uri.startswith('vless://'):
                      print(f'--- Testing VLESS proxy: {proxy_uri} ---')
                      outbound_config = create_vless_config(proxy_uri)
                  elif proxy_uri.startswith('ss://'):
                      print(f'--- Testing Shadowsocks proxy: {proxy_uri} ---')
                      outbound_config = create_ss_config(proxy_uri)
                  elif proxy_uri.startswith('vmess://'):
                      print(f'--- Testing VMess proxy: {proxy_uri} ---')
                      outbound_config = create_vmess_config(proxy_uri)
                  
                  if not outbound_config:
                      print('Could not parse URI. Skipping.')
                      continue

                  config = {
                      'inbounds': [{'type': 'socks', 'listen': '127.0.0.1', 'listen_port': 1080}],
                      'outbounds': [outbound_config]
                  }

                  with open('config.json', 'w') as cfg_file:
                      json.dump(config, cfg_file)

                  process = subprocess.Popen(['sudo', './sing-box', 'run', '-c', 'config.json'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                  time.sleep(8)

                  try:
                      result = subprocess.run(['curl', '--socks5', '127.0.0.1:1080', '-s', '--max-time', '10', 'http://ip-api.com/json'], capture_output=True, text=True)
                      response = json.loads(result.stdout)
                      country = response.get('country')
                      if country == 'Iran':
                          print(f'✅ SUCCESS: Found a working Iran proxy: {outbound_config.get(\"server\")}')
                          # We don't kill the process, let it run for the next steps
                          exit(0)
                      else:
                          print(f'❌ FAILED: Proxy connected from {country}. Trying next...')
                  except (json.JSONDecodeError, subprocess.TimeoutExpired):
                      print('❌ FAILED: Proxy did not connect. Trying next...')
                  
                  process.kill()

          print('::error::No working Iran proxy found.')
          exit(1)
          "
      # --- Part 3: Run Scanner and Deploy ---

      - name: Run Scanner
        run: |
          echo "Starting the scan through the Iran proxy..."
          # Note: The proxy is already running from the previous step
          # This command uses the SOCKS5 proxy set up by sing-box on port 1080
          printf "2\n1\n1\n1\n20" | ./scanner
          echo "Scan finished."

      - name: Convert Top 20 CSV results to JSON
        run: |
          python3 -c "
          import csv, json
          data = {'ipv4': [], 'ipv6': []}
          try:
              with open('result.csv', 'r') as f:
                  reader = csv.DictReader(f)
                  for row in reader:
                      endpoint = row.get('Endpoint', '').strip()
                      if not endpoint: continue
                      if '[' in endpoint and ']' in endpoint:
                          data['ipv6'].append(endpoint)
                      else:
                          data['ipv4'].append(endpoint)
              with open('results.json', 'w') as f:
                  json.dump(data, f, indent=2)
              print('Successfully converted endpoints to JSON.')
          except FileNotFoundError:
              print('Error: result.csv not found.')
              exit(1)
          "
      
      - name: Checkout public repository
        uses: actions/checkout@v4
        with:
          repository: F0rc3Run/free-warp-endpoints
          token: ${{ secrets.PAT }}
          path: 'public-repo'

      - name: Move result file to public repo
        run: mv results.json public-repo/results.json

      - name: Commit and Push to public repository
        run: |
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [[ -n $(git status -s) ]]; then
            git add results.json
            git commit -m "Automated: Update top 20 endpoints"
            git push
          else
            echo "No changes to commit."
          fi
