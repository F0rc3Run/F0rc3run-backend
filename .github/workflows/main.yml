name: Scan WARP via Iran Proxy and Deploy Results

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  scan-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # --- بخش اول: نصب ابزارها، کامپایل اسکنر و اتصال به پراکسی ایران ---

      - name: Checkout Main Repo
        uses: actions/checkout@v4

      - name: Setup Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install Dependencies & Build Scanner
        run: |
          # نصب ابزارهای مورد نیاز
          sudo apt-get update && sudo apt-get install -y wget curl jq
          
          # دانلود کلاینت sing-box
          echo "Downloading sing-box client..."
          wget -O sing-box.tar.gz "https://github.com/SagerNet/sing-box/releases/download/v1.12.0/sing-box-1.12.0-linux-amd64.tar.gz"
          tar -xzf sing-box.tar.gz
          cp sing-box-1.12.0-linux-amd64/sing-box .
          chmod +x sing-box
          
          # دانلود و کامپایل اسکنر از سورس کد (طبق الگوی شما)
          echo "Cloning and building the scanner from source..."
          git clone https://github.com/bia-pain-bache/BPB-Warp-Scanner.git scanner-source
          cd scanner-source
          go build -o ../scanner .
          cd ..
          chmod +x scanner
          echo "Scanner built successfully."

      - name: Find and Connect to a Working Iran Proxy
        id: proxy_connect
        run: |
          # (این بخش بدون تغییر باقی می‌ماند)
          echo "Fetching proxy list from URL..."
          curl -s -o ir_proxies.txt https://raw.githubusercontent.com/F0rc3Run/F0rc3Run/refs/heads/main/splitted-by-country/IR.txt
          
          while IFS= read -r proxy_uri; do
            if [[ -z "$proxy_uri" ]]; then continue; fi
            echo "--- Testing proxy: $proxy_uri ---"
            
            address_part=$(echo "$proxy_uri" | cut -d'@' -f2 | cut -d'?' -f1)
            uuid=$(echo "$proxy_uri" | cut -d'/' -f3 | cut -d'@' -f1)
            server=$(echo "$address_part" | cut -d':' -f1)
            server_port=$(echo "$address_part" | cut -d':' -f2)

            if [[ -z "$uuid" || -z "$server" || -z "$server_port" ]]; then continue; fi
            
            echo "{\"inbounds\":[{\"type\":\"socks\",\"listen\":\"127.0.0.1\",\"listen_port\":1080}],\"outbounds\":[{\"type\":\"vless\",\"server\":\"$server\",\"server_port\":$server_port,\"uuid\":\"$uuid\"}]}" > config.json
            
            sudo ./sing-box run -c config.json > singbox.log 2>&1 &
            SINGBOX_PID=$!
            sleep 8
            
            response=$(curl --socks5 127.0.0.1:1080 -s --max-time 10 http://ip-api.com/json)
            kill $SINGBOX_PID
            
            country=$(echo "$response" | jq -r .country)
            if [ "$country" == "Iran" ]; then
              echo "✅ SUCCESS: Found a working Iran proxy: $server"
              sudo ./sing-box run -c config.json > singbox.log 2>&1 &
              exit 0
            else
              echo "❌ FAILED: Proxy is not in Iran. Trying next..."
            fi
          done < ir_proxies.txt
          echo "::error::No working Iran proxy found."
          exit 1
          
      # --- بخش دوم: اجرای اسکنر و پردازش نتایج ---

      - name: Run Scanner
        run: |
          echo "Starting the scan through the Iran proxy..."
          # اجرای اسکنر کامپایل‌شده با دستور printf (طبق الگوی شما)
          printf "2\n1\n1\n1\n20" | ./scanner
          echo "Scan finished."

      - name: Convert Top 20 CSV results to JSON
        run: |
          python3 -c "
          import csv, json
          data = {'ipv4': [], 'ipv6': []}
          try:
              with open('result.csv', 'r') as f:
                  reader = csv.DictReader(f)
                  for row in reader:
                      endpoint = row.get('Endpoint', '').strip()
                      if not endpoint: continue
                      if '[' in endpoint and ']' in endpoint:
                          data['ipv6'].append(endpoint)
                      else:
                          data['ipv4'].append(endpoint)
              with open('results.json', 'w') as f:
                  json.dump(data, f, indent=2)
              print('Successfully converted endpoints to JSON.')
          except FileNotFoundError:
              print('Error: result.csv not found.')
              exit(1)
          "
      
      # --- بخش سوم: انتقال فایل به ریپازیتوری عمومی ---

      - name: Checkout public repository
        uses: actions/checkout@v4
        with:
          repository: F0rc3Run/free-warp-endpoints
          token: ${{ secrets.PAT }}
          path: 'public-repo'

      - name: Move result file to public repo
        run: mv results.json public-repo/results.json

      - name: Commit and Push to public repository
        run: |
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [[ -n $(git status -s) ]]; then
            git add results.json
            git commit -m "Automated: Update top 20 endpoints"
            git push
          else
            echo "No changes to commit."
          fi
