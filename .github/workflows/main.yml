name: Warp Endpoint Generator

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  generate-endpoint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup environment and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl jq net-tools
        
    - name: Generate sing-box config from WARP.conf
      id: prepare_config
      run: |
        # Ensure the WARP.conf file exists
        if [ ! -f "WARP.conf" ]; then
          echo "❌ Error: WARP.conf file not found in the repository."
          exit 1
        fi
        
        echo "Found WARP.conf. Extracting details..."
        
        # Extract connection details from WARP.conf using standard tools
        PRIVATE_KEY=$(grep 'PrivateKey' WARP.conf | cut -d'=' -f2 | xargs)
        PEER_PUBLIC_KEY=$(grep 'PublicKey' WARP.conf | cut -d'=' -f2 | xargs)
        ADDRESS=$(grep 'Address' WARP.conf | cut -d'=' -f2 | xargs)
        ENDPOINT=$(grep 'Endpoint' WARP.conf | cut -d'=' -f2 | xargs)
        
        # Generate the sing-box.json file dynamically
        cat > singbox.json <<EOF
        {
          "outbounds": [
            {
              "type": "wireguard",
              "tag": "wireguard-out",
              "server": "${ENDPOINT%%:*}",
              "server_port": ${ENDPOINT##*:},
              "local_address": ["${ADDRESS}"],
              "private_key": "${PRIVATE_KEY}",
              "peer_public_key": "${PEER_PUBLIC_KEY}",
              "mtu": 1280
            },
            {
              "type": "socks",
              "tag": "socks-in",
              "listen": "0.0.0.0",
              "listen_port": 1080
            }
          ],
          "route": {
            "rules": [
              {
                "inbound": ["socks-in"],
                "outbound": "wireguard-out"
              }
            ]
          }
        }
        EOF
        
        if [ -f "singbox.json" ]; then
          echo "✅ Successfully generated singbox.json"
          echo "config_ready=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Failed to generate singbox.json"
          exit 1
        fi

    - name: Run Sing-box Proxy
      if: steps.prepare_config.outputs.config_ready == 'true'
      id: warp
      run: |
        # Download, extract, and prepare sing-box
        wget -O sing-box.tar.gz "https://github.com/SagerNet/sing-box/releases/download/v1.12.0/sing-box-1.12.0-linux-amd64.tar.gz"
        tar -xzf sing-box.tar.gz
        cp sing-box-1.12.0-linux-amd64/sing-box .
        chmod +x sing-box
        
        echo "Starting sing-box proxy..."
        sudo ./sing-box run -c singbox.json > singbox.log 2>&1 &
        sleep 10
        
        echo "--- Sing-box Log ---"
        cat singbox.log
        
        if sudo netstat -tlnp | grep -q "1080"; then
          ENDPOINT="socks5://127.0.0.1:1080"
          echo "✅ Endpoint found: $ENDPOINT"
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT
        else
          echo "❌ Failed to start sing-box proxy."
        fi

    - name: Create GitHub Release
      if: success() && steps.warp.outputs.endpoint != ''
      uses: ncipollo/release-action@v1
      with:
        tag: endpoint-${{ github.run_number }}
        name: Warp Endpoint - ${{ github.run_number }}
        body: |
          **SOCKS5 Endpoint:** `${{ steps.warp.outputs.endpoint }}`
          **Generated at:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        
    - name: Final Status
      if: always()
      run: |
        if [ "${{ steps.warp.outputs.endpoint }}" != "" ]; then
          echo "✅ Success! Endpoint: ${{ steps.warp.outputs.endpoint }}"
        else
          echo "❌ Failed to generate endpoint."
        fi
